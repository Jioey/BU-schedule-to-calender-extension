{"version":3,"file":"popup.bundle.js","mappings":";;AAAA;AACA;AACA;;;;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://chrome-extension/webpack/bootstrap","webpack://chrome-extension/webpack/runtime/define property getters","webpack://chrome-extension/webpack/runtime/hasOwnProperty shorthand","webpack://chrome-extension/webpack/runtime/make namespace object","webpack://chrome-extension/./src/popup.js"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","// Adds listener to popup\r\ndocument.addEventListener(\"DOMContentLoaded\", async () => {\r\n   let activeTab = await getActiveTabURL();\r\n\r\n   if (activeTab.url.includes(\"bu.edu/link/bin/uiscgi_studentlink.pl/\")) {\r\n      // Add download button and functionality\r\n      let downloadButton = document.getElementById(\"download\")\r\n      setButtonControl(\"download\", \"Download schedule\", onClassesDownload, downloadButton)\r\n\r\n      let inputDiv = document.getElementById(\"dateInput\")\r\n      setDateInput(inputDiv)\r\n   } else {\r\n      // when current tab is not BU schedule \r\n      let container = document.getElementsByClassName(\"container\")[0];\r\n      container.innerHTML = '<div class=\"title\">This is not a BU schedule page.</div>';\r\n   }\r\n});\r\n\r\n\r\n// Helper: Get active tab's url (used in popup)\r\nexport async function getActiveTabURL() {\r\n   let tabs = await chrome.tabs.query({\r\n      currentWindow: true,\r\n      active: true\r\n   });\r\n\r\n   return tabs[0];\r\n}\r\n\r\n// onClick event: Injects parseClassesSchedule to current tab\r\nconst onClassesDownload = async () => {\r\n   // Gets user's current tab url\r\n   let activeTab = await getActiveTabURL()\r\n\r\n   // Gets html input from popup page\r\n   let startDate = document.getElementById(\"inputTag\").value\r\n\r\n   // Creates startDate variable then injects script\r\n   chrome.scripting.executeScript({\r\n      target: {tabId: activeTab.id},\r\n      args: [{startDate: startDate}],\r\n      func: vars => Object.assign(self, vars),\r\n    }, () => {\r\n      chrome.scripting.executeScript({\r\n         target: { tabId: activeTab.id },\r\n         files: ['parseClassesSchedule.bundle.js']\r\n      });\r\n    });\r\n\r\n};\r\n\r\n/**\r\n * Creates download button and assgins it to a @param eventListener\r\n * @param {String} icon Image name to use as icon\r\n * @param {String} title String to use as hover title\r\n * @param {Function} eventListener Function assigned to button\r\n * @param {HTMLElement} parentElement Parent element to assign the button to\r\n */\r\nconst setButtonControl = (icon, title, eventListener, parentElement) => {\r\n   // Creates HTML element\r\n   let controlElement = document.createElement(\"img\")\r\n\r\n   // Adds icon and hover title\r\n   controlElement.src = \"assets/\" + icon + \".png\"\r\n   controlElement.title = title\r\n\r\n   // Adds event listenter\r\n   controlElement.addEventListener(\"click\", eventListener)\r\n   // TODO?: style download button: controlElement.style = \"\"\r\n   // Appends to parent\r\n   parentElement.appendChild(controlElement)\r\n};\r\n\r\n// Creates date picker (html input)\r\nconst setDateInput = (parentElement) => {\r\n   // Creates input element\r\n   let inputElement = document.createElement(\"input\")\r\n\r\n   inputElement.type = \"date\"\r\n   inputElement.valueAsDate = new Date();  // default date\r\n   inputElement.id = \"inputTag\"\r\n\r\n   parentElement.appendChild(inputElement)\r\n}"],"names":[],"sourceRoot":""}